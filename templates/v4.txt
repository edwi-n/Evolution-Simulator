<!DOCTYPE html>
<html>

<head>
  <style>
    body {
      background-color: grey;
      color: white
    }
  </style>
</head>

<body>
  <h1 id="title">Evolution Simulator</h1>
  <div id="simulation-main">
    <div id="simulation-info"></div>
    <canvas id="simulation-grid" width="1000" height="1000"></canvas>
    <!-- <div id="simulation-grid"></div> -->
    <div id="simulation-progress"></div>
    <div id="selected-organism-info"></div>
  </div>
  </div>
</body>

</html>

<script src="//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
<script>
  var data = JSON.parse('{{data | tojson | safe}}')
  const canvas = document.getElementById("simulation-grid")
  const ctx = canvas.getContext("2d")
  var iteration = 1
  var j = 0
  var prev = {}
  ctx.fillStyle = "white"
  ctx.fillRect(0, 0, 1000, 1000)

  function resetGrid() {
    var grid = []
    var row = []
    for (let l = 0; l < 10; l++) {
      row.push(" ")
    }
    for (let l = 0; l < 10; l++) {
      grid.push(row)
    }
    return grid
  }

  function displayGrid(grid) {
    console.clear()
    display = ""
    for (let l = 0; l < 10; l++) {
      row = ""
      for (let k = 0; k < 10; k++) {
        row += grid[l][k]
      }
      row += "\n"
      display += row
    }
    console.log(display)
  }

  var grid = resetGrid();

  function nextIteration(i) {
    console.log(i)
    while (j < data.movement.length) {
      if (data.movement[j][0] == -1) {
        ctx.fillRect(0, 0, 1000, 1000)
        grid = resetGrid()
        j += 1;
        return
      }
      if (data.movement[j][0] in prev) {
        ctx.fillRect(prev[data.movement[j][0]][0] * 10, prev[data.movement[j][0]][1] * 10, 10, 10)
        grid[prev[data.movement[j][0]][0]][prev[data.movement[j][0]][1]] = ' '
      }
      ctx.clearRect(data.movement[j][1][1] * 10, data.movement[j][1][0] * 10, 10, 10)
      grid[data.movement[j][1][1]][data.movement[j][1][0]] = 'x'
      prev[data.movement[j][0]] = [data.movement[j][1][1], [data.movement[j][1][0]]]
      document.getElementById("simulation-progress").innerHTML = i
      setInterval(displayGrid(grid), 1000)
      j += 1
      console.log(j)
    }
  }


  for (let i = 0; i < 10; i++) {
    prev = {}
    fetch("/get").then((response) => {
      return response.json()
    }).then((dat) => {
      data.movement = data.movement.concat(dat.movement)
      data.organisms = data.organisms.concat(dat.organisms)
    }).then((a) => {
      setInterval(nextIteration(i), 100)
    })
  }

</script>